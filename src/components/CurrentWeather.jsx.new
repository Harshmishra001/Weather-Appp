import { useWeather } from '../context/WeatherContext';
import { formatDate, formatTemperature, getWeatherIconUrl, getWindDirection } from '../utils/helpers';
import { motion } from 'framer-motion';
import { 
  ThermometerIcon, 
  DropletIcon, 
  WindIcon, 
  PressureIcon,
  SunriseIcon,
  SunsetIcon
} from './WeatherIcons';

const CurrentWeather = () => {
  const { currentWeather, units, toggleUnits } = useWeather();

  if (!currentWeather) return null;

  const {
    name,
    main: { temp, feels_like, humidity, pressure },
    weather,
    wind,
    sys: { country, sunrise, sunset },
    dt
  } = currentWeather;

  const weatherDescription = weather[0].description;
  const iconUrl = getWeatherIconUrl(weather[0].icon, '4x');
  const windDirection = getWindDirection(wind.deg);

  const weatherInfoStyle = {
    display: 'flex',
    flexDirection: 'column',
    alignItems: 'center',
    padding: '0.75rem',
    backgroundColor: '#eff6ff',
    borderRadius: '0.5rem'
  };

  const labelStyle = {
    fontSize: '0.875rem',
    color: 'var(--color-gray)'
  };

  const valueStyle = {
    fontSize: '1.25rem',
    fontWeight: '600',
    color: 'var(--color-gray-dark)'
  };

  // Animation variants
  const containerVariants = {
    hidden: { opacity: 0 },
    visible: { 
      opacity: 1,
      transition: { 
        duration: 0.5,
        when: "beforeChildren",
        staggerChildren: 0.1
      }
    }
  };

  const itemVariants = {
    hidden: { y: 20, opacity: 0 },
    visible: { 
      y: 0, 
      opacity: 1,
      transition: { duration: 0.3 }
    }
  };

  return (
    <motion.div 
      className="weather-card"
      variants={containerVariants}
      initial="hidden"
      animate="visible"
    >
      <div style={{
        display: 'flex',
        flexDirection: 'column',
        alignItems: 'center',
        justifyContent: 'space-between',
        '@media (min-width: 768px)': {
          flexDirection: 'row',
          alignItems: 'flex-start'
        }
      }}>
        <motion.div 
          style={{
            display: 'flex',
            flexDirection: 'column',
            alignItems: 'center',
            marginBottom: '1rem',
            '@media (min-width: 768px)': {
              alignItems: 'flex-start',
              marginBottom: 0
            }
          }}
          variants={itemVariants}
        >
          <div style={{ display: 'flex', alignItems: 'center' }}>
            <h2 style={{
              fontSize: '1.5rem',
              fontWeight: 'bold',
              color: 'var(--color-gray-dark)'
            }} className="dark-text">{name}, {country}</h2>
            <motion.button
              onClick={toggleUnits}
              style={{
                marginLeft: '0.5rem',
                padding: '0.25rem 0.5rem',
                fontSize: '0.75rem',
                backgroundColor: '#dbeafe',
                color: 'var(--color-primary-dark)',
                borderRadius: '0.25rem'
              }}
              whileHover={{ 
                scale: 1.05,
                backgroundColor: '#bfdbfe'
              }}
              whileTap={{ scale: 0.95 }}
            >
              {units === 'metric' ? '°C → °F' : '°F → °C'}
            </motion.button>
          </div>
          <p style={{ fontSize: '0.875rem', color: 'var(--color-gray)' }}>{formatDate(dt)}</p>
          <div style={{ display: 'flex', alignItems: 'center', marginTop: '1rem' }}>
            <motion.img 
              src={iconUrl} 
              alt={weatherDescription} 
              style={{ width: '5rem', height: '5rem' }} 
              animate={{ 
                scale: [1, 1.1, 1],
                rotate: [0, 5, -5, 0]
              }}
              transition={{ 
                duration: 5,
                repeat: Infinity,
                repeatType: 'reverse'
              }}
            />
            <div style={{ marginLeft: '0.5rem' }}>
              <motion.h1 
                style={{
                  fontSize: '3rem',
                  fontWeight: 'bold',
                  color: 'var(--color-gray-dark)'
                }} 
                className="dark-text"
                animate={{ scale: [1, 1.03, 1] }}
                transition={{ 
                  duration: 2,
                  repeat: Infinity,
                  repeatType: 'reverse'
                }}
              >
                {formatTemperature(temp, units)}
              </motion.h1>
              <p style={{
                color: 'var(--color-gray)',
                textTransform: 'capitalize'
              }} className="dark-text-secondary">{weatherDescription}</p>
            </div>
          </div>
        </motion.div>

        <motion.div 
          style={{
            display: 'grid',
            gridTemplateColumns: 'repeat(2, 1fr)',
            gap: '1rem'
          }}
          variants={itemVariants}
        >
          <motion.div 
            style={weatherInfoStyle} 
            className="dark-bg-secondary"
            whileHover={{ scale: 1.05 }}
          >
            <ThermometerIcon size={24} color="var(--color-primary)" />
            <span style={labelStyle}>Feels Like</span>
            <span style={valueStyle} className="dark-text">
              {formatTemperature(feels_like, units)}
            </span>
          </motion.div>
          
          <motion.div 
            style={weatherInfoStyle} 
            className="dark-bg-secondary"
            whileHover={{ scale: 1.05 }}
          >
            <DropletIcon size={24} color="var(--color-primary)" />
            <span style={labelStyle}>Humidity</span>
            <span style={valueStyle} className="dark-text">{humidity}%</span>
          </motion.div>
          
          <motion.div 
            style={weatherInfoStyle} 
            className="dark-bg-secondary"
            whileHover={{ scale: 1.05 }}
          >
            <WindIcon size={24} color="var(--color-primary)" />
            <span style={labelStyle}>Wind</span>
            <span style={valueStyle} className="dark-text">
              {wind.speed} {units === 'metric' ? 'm/s' : 'mph'} {windDirection}
            </span>
          </motion.div>
          
          <motion.div 
            style={weatherInfoStyle} 
            className="dark-bg-secondary"
            whileHover={{ scale: 1.05 }}
          >
            <PressureIcon size={24} color="var(--color-primary)" />
            <span style={labelStyle}>Pressure</span>
            <span style={valueStyle} className="dark-text">{pressure} hPa</span>
          </motion.div>
        </motion.div>
      </div>
      
      <motion.div 
        style={{
          display: 'flex',
          justifyContent: 'space-between',
          marginTop: '1.5rem',
          paddingTop: '1rem',
          borderTop: '1px solid #e5e7eb'
        }} 
        className="dark-border"
        variants={itemVariants}
      >
        <motion.div 
          style={{ display: 'flex', flexDirection: 'column', alignItems: 'center' }}
          whileHover={{ scale: 1.05 }}
        >
          <SunriseIcon size={24} color="var(--color-primary)" />
          <span style={labelStyle}>Sunrise</span>
          <span style={{
            fontSize: '1rem',
            fontWeight: '500',
            color: 'var(--color-gray-dark)'
          }} className="dark-text">
            {formatDate(sunrise, 'time')}
          </span>
        </motion.div>
        
        <motion.div 
          style={{ display: 'flex', flexDirection: 'column', alignItems: 'center' }}
          whileHover={{ scale: 1.05 }}
        >
          <SunsetIcon size={24} color="var(--color-primary)" />
          <span style={labelStyle}>Sunset</span>
          <span style={{
            fontSize: '1rem',
            fontWeight: '500',
            color: 'var(--color-gray-dark)'
          }} className="dark-text">
            {formatDate(sunset, 'time')}
          </span>
        </motion.div>
      </motion.div>
    </motion.div>
  );
};

export default CurrentWeather;
